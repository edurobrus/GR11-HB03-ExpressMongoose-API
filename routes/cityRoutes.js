const express = require("express");
const router = express.Router();
const cityController = require("../controllers/cityController");

/**
 * @swagger
 * tags:
 *   name: Cities
 *   description: Endpoints for city management
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     City:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: Unique ID generated by MongoDB
 *         city_name:
 *           type: string
 *           description: Name of the city
 *         location:
 *           type: object
 *           properties:
 *             type:
 *               type: string
 *               enum: ['Point']
 *             coordinates:
 *               type: array
 *               items:
 *                 type: number
 *               example: [2.3522, 48.8566]
 *       example:
 *         _id: "60c72b2f9b1e8a001c8e4d2a"
 *         city_name: "Paris"
 *         location:
 *           type: "Point"
 *           coordinates: [2.3522, 48.8566]
 */

/**
 * @swagger
 * /api/cities:
 *   get:
 *     summary: Get all cities
 *     tags: [Cities]
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: number
 *         description: "Result limit (default: 10)"
 *     responses:
 *       200:
 *         description: List of cities
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Citie'
 */
router.get("/", cityController.getCities);

/**
 * @swagger
 * /api/cities/nearby:
 *   get:
 *     summary: Get nearby cities
 *     tags: [Cities]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: lng
 *         schema:
 *           type: number
 *         required: true
 *         example: 2.3522
 *       - in: query
 *         name: lat
 *         schema:
 *           type: number
 *         required: true
 *         example: 48.8566
 *       - in: query
 *         name: maxDistance
 *         schema:
 *           type: number
 *           default: 50000
 *     responses:
 *       200:
 *         description: List of nearby cities
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Citie'
 */
router.get("/nearby", cityController.getNearbyCities);

/**
 * @swagger
 * /api/cities/getById/{id}:
 *   get:
 *     summary: Get city by ID
 *     tags: [Cities]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *     responses:
 *       200:
 *         description: City found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Citie'
 *       404:
 *         description: City not found
 */
router.get("/getById/:id", cityController.getCityById);

/**
 * @swagger
 * /api/cities:
 *   post:
 *     summary: Create new city
 *     tags: [Cities]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Citie'
 *     responses:
 *       201:
 *         description: City successfully created
 *       400:
 *         description: Invalid data
 */
router.post("/", cityController.createCity);

/**
 * @swagger
 * /api/cities/update/{id}:
 *   put:
 *     summary: Update city
 *     tags: [Cities]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Citie'
 *     responses:
 *       200:
 *         description: City updated
 *       404:
 *         description: City not found
 */
router.put("/update/:id", cityController.updateCity);

/**
 * @swagger
 * /api/cities/delete/{id}:
 *   delete:
 *     summary: Delete city
 *     tags: [Cities]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *     responses:
 *       200:
 *         description: City deleted
 *       404:
 *         description: City not found
 */
router.delete("/delete/:id", cityController.deleteCity);

module.exports = router;
