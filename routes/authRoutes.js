const express = require('express');
const { register, login } = require('../controllers/authController');

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Auth
 *   description: Endpoints for authentication management
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: Unique ID generated by MongoDB.
 *         username:
 *           type: string
 *           description: The username of the user.
 *         password:
 *           type: string
 *           description: |
 *             The password for the user. 
 *             Note: should be hashed in real scenarios for security.
 *         age:
 *           type: integer
 *           description: The age of the user.
 *         email:
 *           type: string
 *           format: email
 *           description: The email address of the user.
 *       example:
 *         _id: "60c72b2f9b1e8a001c8e4d2a"
 *         username: "johndoe"
 *         password: "mypassword"
 *         age: 25
 *         email: "john.doe@example.com"
 */
/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Register a new user
 *     tags: [Auth]
 *     parameters:
 *       - in: query
 *         name: username
 *         required: true
 *         schema:
 *           type: string
 *         example: "johndoe"
 *       - in: query
 *         name: password
 *         required: true
 *         schema:
 *           type: string
 *         example: "Secret123!"
 *       - in: query
 *         name: email
 *         required: true
 *         schema:
 *           type: string
 *           format: email
 *         example: "john.doe@example.com"
 *       - in: query
 *         name: age
 *         required: true
 *         schema:
 *           type: integer
 *         example: 25
 *     responses:
 *       200:
 *         description: User registered successfully
 *         content:
 *           application/json:
 *             example:
 *               token: "7adfbf456109bb263f7156fcf682a55859a7de88539fd9d128e7972269374b15"
 *       400:
 *         description: Validation error or user exists
 *         examples:
 *           application/json:
 *             message: "User already exists"
 *       500:
 *         description: Server error
 */



router.post('/register', register);
// routes/authRoutes.js (Swagger actualizado)

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Authenticate user
 *     tags: [Auth]
 *     parameters:
 *       - in: query
 *         name: username
 *         required: true
 *         schema:
 *           type: string
 *         example: "johndoe"
 *       - in: query
 *         name: password
 *         required: true
 *         schema:
 *           type: string
 *         example: "Secret123!"
 *     responses:
 *       200:
 *         description: Login successful
 *         content:
 *           application/json:
 *             example:
 *               token: "7adfbf456109bb263f7156fcf682a55859a7de88539fd9d128e7972269374b15"
 *       400:
 *         description: Invalid credentials
 *         examples:
 *           application/json:
 *             message: "Invalid username or password"
 *       500:
 *         description: Server error
 */
router.post('/login', login);

module.exports = router;
